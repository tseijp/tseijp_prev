// Auto-generated by https://github.com/react-spring/gltfjsx

import * as THREE from "three"
import React, { useEffect, useRef, useState } from "react"
import { useLoader, useFrame } from "react-three-fiber"
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader"
//import { draco } from 'drei'


export const Model = ({dark=true, size=50, mouse={current:[0,0]}, position=[0,-11,0],scale=[7,7,7]}:any) => {
    const url = "https://tseijp-static.s3.ap-northeast-1.amazonaws.com/Xbot.glb"
    const {animations, nodes}:any = useLoader(GLTFLoader, url, )
    const group = useRef<any>(null)
    const actions = useRef<any>(null)
    //const [action] = useState(3)
    const [mixer] = useState<any>(() => new THREE.AnimationMixer(undefined as any))
    const modelPos  = {x:0,y:0}
    useFrame(({camera}:any, delta)=>{
        mixer.update(delta)
        if(! group?.current?.position) return
        group.current.position.x = modelPos.x
        group.current.position.z = modelPos.y
        camera.updateProjectionMatrix(void (
            camera.lookAt(new THREE.Vector3(modelPos.x/2,0,modelPos.y/2))))
    })
    useEffect(() => {
        const actionNum = size > 50 ? 3 : 1
        actions.current = { idle: mixer.clipAction(animations[actionNum], group.current) }
        actions.current.idle.play()
        actions.current.idle.weight = 1
        actions.current.idle.timeScale = 1
        return () => animations.forEach((clip:any) => mixer.uncacheClip(clip))
    }, [animations,mixer,size])
    if (!nodes)
        return null
    return (
        <group ref={group} {...{position, scale}} dispose={null}>
          <group rotation={[Math.PI/2,0,0]} scale={[0.01,0.01,0.01]}>
            <primitive object={nodes["mixamorigHips"]} />
            <skinnedMesh geometry={nodes["Beta_Joints"].geometry}
                skeleton={nodes["Beta_Joints"].skeleton}
                rotation={[-Math.PI/2,0,0]} scale={[100, 100, 100]}>
                <meshPhongMaterial
                    attach="material" color={dark?0x212121:0x000000}
                    depthWrite={false} skinning />
            </skinnedMesh>
            <skinnedMesh geometry={nodes["Beta_Surface"].geometry}
                skeleton={nodes["Beta_Surface"].skeleton}
                rotation={[-Math.PI/2,0,0]} scale={[100, 100, 100]}>
                <meshPhongMaterial
                    attach="material" color={dark?0x000000:0xffffff}
                    depthWrite={false} skinning />
            </skinnedMesh>
          </group>
        </group>
    )
}
