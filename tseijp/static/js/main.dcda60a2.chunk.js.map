{"version":3,"sources":["src/utils.ts","src/hooks/useGrid.ts","docs/utils/serviceWorker.ts","src/hooks/useMedia.ts","src/hooks/useGrids.ts","src/hooks/useView.ts","docs/index.tsx","docs/About.tsx","docs/Grids.tsx","docs/View.tsx"],"names":["defaultMedia","media","matches","onchange","addListener","removeListener","addEventListener","removeEventListener","dispatchEvent","_","defaultConfig","mediaConfig","size","xs","sm","md","lg","xl","width","window","innerWidth","widthRef","mediaType","viewConfig","once","onView","timeout","defaultView","prefix","convertNumToPix","value","config","element","Element","current","clientWidth","Number","Array","every","v","border","filter","map","margin","length","reduce","a","b","convertObjToStr","query","Object","entries","key","val","replace","s","toLowerCase","test","join","mergeConfig","props","configs","initConfig","assign","fromEntries","p","some","conf","find","convertPropsToList","keys","toN","k","toS","i","grid","m","xsGr","g","gtos","noGr","convertPrefixToList","convertFuncToList","list","shallowEqual","objA","objB","keysA","keysB","bHasOwnProperty","prototype","hasOwnProperty","bind","idx","createGrid","effect","initProps","refs","useState","cP2L","setList","view","setView","l","setGrid","noneRef","useRef","gridRef","viewRef","fill","set","useCallback","initState","state","mounted","medias","q","fn","undefined","matchMedia","Boolean","observers","ref","el","observer","IntersectionObserver","entry","setTimeout","isIntersecting","unobserve","root","observe","useGrid","useEffect","useLayoutGrid","useLayoutEffect","location","hostname","match","createMedia","rawQuery","defaultState","onChange","createGrids","cofig","cF2L","grids","useGrids","createView","target","callback","initialConfig","configRef","useView","Pages","About","Grids","face","React","ws","style","display","emoji","View","ref1","ref2","isView","none","fontSize","init","bool","background","transition","App","navigator","language","lang","setLang","dark","setDark","setSize","usePage","Page","id","page","setPage","minHeight","styleItem","min","height","color","onClick","href","toUpperCase","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcda60a2.chunk.js","sourcesContent":["import {MediaList, MediaObject, MediaString, Config} from './types'\r\n//  ************************* 📺 useMedia 📺 *************************  //\r\nexport const defaultMedia : MediaString = {\r\n    media: '',\r\n    matches: false,\r\n    onchange: ()=>{},\r\n    addListener: ()=>{},\r\n    removeListener: ()=>{},\r\n    addEventListener: ()=>{},\r\n    removeEventListener: ()=>{},\r\n    dispatchEvent: (_: Event) => true,\r\n};\r\nexport const defaultConfig : Config = {\r\n    mediaConfig:{\r\n        size: {xs:1,sm:576,md:768,lg:992,xl:1200},\r\n        width: window.innerWidth,\r\n        widthRef: null,\r\n        mediaType: null,\r\n    },\r\n    viewConfig:{\r\n        once: false,\r\n        onView: null,\r\n        timeout: 0,\r\n        defaultView: true,\r\n    },\r\n    prefix : ['none','init','onView','mediaConfig','viewConfig']\r\n}\r\nexport function convertNumToPix <T=any> (\r\n    value:T, config:Config=defaultConfig\r\n) : T {\r\n    const widthRef = config.widthRef\r\n    const element = widthRef instanceof Element?widthRef:widthRef?.current\r\n    const width = element ? element.clientWidth : window.innerWidth\r\n    if ( typeof value===\"number\" && value**2 < 1 )\r\n        return value<0\r\n            ? ~~( width*(Number(value)+1) ) as unknown as T\r\n            : ~~( width*Number(value)     ) as unknown as T\r\n    if ( value instanceof Array && value.every(v=>typeof v===\"number\") ) {\r\n        const border = value.filter(v=>v>0).map(v=>v<1?width*Number(v):v)\r\n        const margin = width - (border.length? border.reduce((a,b)=>a+b):0)\r\n        return value.map(v=> v===0 ? 0 : v<0\r\n            ? (v>-1 ? ~~( margin*Number(-v) ) : v)\r\n            : (v< 1 ? ~~(  width*Number( v) ) : v)\r\n        ) as unknown as T\r\n    }\r\n    return value\r\n}\r\nexport function convertObjToStr<T=string|number|boolean>(\r\n    query:string|MediaObject<T>,\r\n    config:Config = defaultConfig,\r\n) : string {\r\n    if (typeof query==='string') return query;\r\n    return [ config.mediaType||'', ...Object\r\n        .entries(query)\r\n        .map( ([key,val]:[string,T]) : [string,T] =>\r\n            [ key.replace(/[A-Z]/g,s=>`-${s.toLowerCase()}`).toLowerCase(), val ])\r\n        .map( ([key,val]:[string,T]) : string => (typeof val==='boolean')\r\n          ? `${val?'':'not '}${key}`\r\n          : `(${key}: ${  typeof val==='number' && /[height|width]$/.test(key)\r\n              ? `${convertNumToPix(val,config)}px`\r\n              : val })`)\r\n    ].filter(v=>v).join(' and ');\r\n}\r\n//  ************************* 👌 useGrid 👌 *************************  //\r\n//  * mergeConfig\r\n//  *   * initProps :{...size, ...prefix}\r\n//  *   * initConfig:{xConfig, prefix, ...xConfig, ...prefix}\r\n//  *   *  => {...xConfig, ...prefix} = defaultProps\r\n//  * convertPropsToList\r\n//  *   * {md:0, lg:.5, {min...}:1}      =Object.entries=>\r\n//  *   * [[md,0],[lg,.5],[min...,1]]    =[convertObjToStr,convertNumToPix]=>\r\n//  *   * [[md,0],[lg:100],[min...,200]] =convertPrefixToList=>\r\n//  *   * [['min-width...',0],[min-width...,.5]]\r\n//  ************************* ************* *************************  //\r\nexport const mergeConfig = <T=any>(\r\n    props:MediaList<T>[], config:Config\r\n) : Config => {\r\n    const {prefix, viewConfig, mediaConfig, ...initConfig} = config\r\n    const configs = {viewConfig, mediaConfig, initConfig}\r\n    return Object.assign({},\r\n        Object.fromEntries( props.filter(p=>prefix.some(key=>key===p[0])) ),\r\n     ...Object.entries(configs).map( ([key,conf]:[string,any])=>({\r\n            ...(( props.find(p=>p[0]===key) || [null,{}] )[1]), ...conf\r\n        }) ),\r\n    )\r\n}\r\nexport function convertPrefixToList <T=any>(\r\n    props:[string,T][],\r\n    {size={xs:1,sm:576,md:768,lg:992,xl:1200}}:Config\r\n) : [string,T][] {\r\n    const keys = Object.keys(size)\r\n    const toN = (key:string) :number => keys.find(k=>k===key)? size[key] : 0\r\n    const toS = (key:string,i:number,grid:[string,T][]) =>`(min-width:${ toN(key) }px)${\r\n        i+1-grid.length<0 ? ` and (max-width:${toN(grid[i+1][0])-1}px)` : ''\r\n    }`\r\n     //const rmNone =(key:string):string=>key.replace(/(-none|none)/gi, '')  // ??\r\n    const grid = keys.map(s=>props.find(p=>p[0]===s)||null).filter(m=>m!==null) as [string,T][]\r\n    const xsGr = (grid.length)?grid.find(g=>g[0]===\"xs\")?[]:[[\"xs\",grid[0][1]]] as [string,T][]:[]\r\n    const gtos = [...xsGr,...grid].map((g,i)=>[toS(g[0],i,grid), g[1]])         as [string,T][]\r\n    const noGr = (grid.length)?props.filter(p=>!keys.find(s=>s===p[0])) : props\r\n    return [...noGr, ...gtos]  // as [string,T][]\r\n}\r\nexport function convertPropsToList <T=any> (\r\n    props:MediaList<T>[], config:Config\r\n) : [string,T][] {\r\n    const prefix = props.map( ([key,val])=>[  //TODO\r\n        convertObjToStr(key, config),\r\n        convertNumToPix<T>(val, config)\r\n    ]) as [string,T][]\r\n    return convertPrefixToList<T>(prefix, config)\r\n}\r\n//  ************************* 👌👌 useGrids 👌👌 *************************  //\r\n//  *Inputting an array as \"return value of initialFunc\" is not yet implemented.\r\n//  *That is, it supports only the left side of the following types\r\n//  *    GridProps<T=any> = {[key:string]:T} | MediaList<T>[]\r\n//  *So you cant use G<T> Type as previous code!\r\n//  ***********************************************************  //\r\nexport function convertFuncToList <T=any> (\r\n    props:{[key:string]:T}[]\r\n) {\r\n    const list = props.map((p:any)=>p instanceof Array?p:Object.entries(p))\r\n    return list[0].map(p=>p[0]).map(key =>\r\n        [key, list.map(p=>(p.find(v=>v[0]===key) as any)[1])]\r\n    ) as [string, T[]][]\r\n}\r\n//  ************************* 🥰 shallowEqual 🥰 *************************  //\r\n//  * Ref : https://github.com/dashed/shallowequal/blob/master/index.js\r\n//  ************************* ******************* *************************  //\r\nexport function shallowEqual(objA:any, objB:any) {\r\n    if (objA===objB)\r\n        return true;\r\n    if (typeof objA!==\"object\" || !objA|| typeof objB!==\"object\" || !objB)\r\n        return false;\r\n    const keysA = Object.keys(objA), keysB = Object.keys(objB);\r\n    if (keysA.length !== keysB.length)\r\n        return false;\r\n    const bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\r\n    for (var idx = 0; idx < keysA.length; idx++) {\r\n        const key = keysA[idx];\r\n        if (!bHasOwnProperty(key) || objA[key]!==objB[key])\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\n","import {useLayoutEffect, useEffect, useCallback, useState, useRef} from 'react';\r\nimport {Effect, Config, GridProps as GP, ExtendProps as EP, BasicProps, BasicState, BasicAction} from '../types'\r\nimport {defaultConfig, defaultMedia, convertPropsToList as cP2L, mergeConfig} from '../utils'\r\n\r\nconst createGrid = (effect:Effect) => <T extends any>(\r\n    initProps : BasicProps<GP<T|EP>>,\r\n    refs : React.RefObject<Element>[] | Element[]  = [],\r\n    initConfig:Config=defaultConfig,\r\n) : [T, BasicAction<GP<T|EP>>] => {\r\n    if (typeof initProps==='function')\r\n        initProps = initProps()\r\n    const props = initProps instanceof Array ? initProps : Object.entries(initProps)\r\n    const [config] = useState<Config>(()=>mergeConfig<T|EP>(props, initConfig)) //TODO:set\r\n\r\n    // ********** ➊ grid : output value that match your media query ********** //\r\n    const [list, setList] = useState<[string,T|EP][]>( cP2L<T|EP>(props,config) )\r\n    const [view, setView] = useState<boolean>((config as any).defaultView)\r\n    const [grid, setGrid] = useState<T>((list.filter(l=>l[0]===\"init\")[0]||list[0])[1] as T)\r\n    const noneRef = useRef<T|null>(null)\r\n    const gridRef = useRef<GP<T|EP>>(initProps)\r\n    const viewRef = useRef<boolean[]>(Array(refs.length).fill(view))\r\n\r\n    // ********** ➋ set : Functions to change media conditions later ********** //\r\n    const set = useCallback<BasicAction<GP<T|EP>>>( (initState:BasicState<GP<T|EP>>) => {\r\n        if (typeof initState===\"function\")\r\n            initState = initState(gridRef.current)\r\n        gridRef.current = initState\r\n        const state = initState instanceof Array ? initState : Object.entries(initState)\r\n        setList ( cP2L(state, config) )\r\n    }, [config])\r\n\r\n    // ********** 📺 ➌ effect : for useMedia 📺 ********** //\r\n    effect ( () => {\r\n        let mounted = true;\r\n        const {prefix} = config;\r\n        const medias = list.map( ([query,value]:[string,T|EP]) => {\r\n            if (query===\"none\")\r\n                noneRef.current = value as T\r\n            if (prefix?.some(q=>q===query))\r\n                return { media:null, fn:null }\r\n            const media = window===undefined? defaultMedia : window.matchMedia(query)\r\n            const fn=()=>mounted&&Boolean(media.matches)&&setGrid(value as T)\r\n            media.addListener(fn)\r\n            mounted && Boolean(media.matches) && setGrid(value as T);\r\n            return { media, fn }\r\n        })\r\n        return ()=>{\r\n            mounted = false;\r\n            medias.map(({media,fn})=>fn&&media?.removeListener(fn));\r\n        }\r\n    }, [list,config] )\r\n\r\n    // ********** 👀 ➍ effect : for useView 👀 ********** //\r\n    effect ( ()=> {\r\n        let mounted = true;\r\n        const {timeout=0,once=false,onView=null,} = config;\r\n        const observers = [...refs].map((ref,i) => {\r\n            const el = ref instanceof Element?ref:ref.current\r\n            if ( !el )\r\n                return {observer:null, el}\r\n            const observer = new IntersectionObserver((entries,) => {\r\n                const entry = entries[entries.length-1]\r\n                mounted && setTimeout( () => {\r\n                    viewRef.current[i] = entry.isIntersecting\r\n                    onView && onView(entry.isIntersecting) // TODO input entry\r\n                    noneRef.current && setView(viewRef.current.some(v=>v))\r\n                }, timeout)\r\n                mounted && entry.isIntersecting && once && observer.unobserve(el)\r\n            }, { root:config?.root?.current || null })\r\n            observer.observe(el)\r\n            return {observer, el}\r\n        })\r\n        return () => {\r\n            mounted = false;\r\n            once && observers.map(({observer,el})=> el && observer?.unobserve(el) )\r\n        }\r\n    }, [config] )\r\n    return [view || !noneRef.current ? grid : noneRef.current, set]\r\n}\r\n\r\nexport const useGrid        = createGrid (useEffect);\r\nexport const useLayoutGrid  = createGrid (useLayoutEffect);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// ************************************************** //\r\n// * Ref : https://github.com/streamich/use-media\r\n// ************************************************** //\r\n\r\nimport {useLayoutEffect, useEffect, useState, /*useRef*/} from 'react';\r\nimport {Effect, MediaObject, MediaString, } from '../types'\r\nimport {defaultMedia, convertObjToStr} from '../utils'\r\n\r\nconst createMedia = (effect:Effect) => (\r\n    rawQuery:string|MediaObject, defaultState=false\r\n) : boolean => {\r\n    const query = convertObjToStr(rawQuery);\r\n    const [state, set] = useState<boolean>(defaultState);\r\n    effect (()=>{\r\n        let mounted = true;\r\n        const media:MediaString = (typeof window === undefined)\r\n            ? defaultMedia\r\n            : window.matchMedia(query);\r\n        const onChange =()=> mounted && set(Boolean(media.matches))\r\n        media.addListener(onChange)\r\n        set(media.matches);\r\n        return () => 1&&(mounted=false, media.removeListener(onChange) )\r\n    }, [query])\r\n    return state\r\n}\r\n\r\nexport const useMedia       = createMedia(useEffect);\r\nexport const useLayoutMedia = createMedia(useLayoutEffect);\r\n","import { useGrid, useLayoutGrid } from './useGrid'\r\nimport { defaultConfig, convertFuncToList as cF2L} from '../utils'\r\nimport { Config, Grid, FunctionProps, FunctionAction } from '../types'\r\n\r\n\r\nexport const createGrids = (grid:unknown) => <T extends any> (\r\n    length:number,\r\n    props:FunctionProps<T>,\r\n    refs:React.RefObject<Element>[]|Element[]|[]=[],\r\n    cofig:Config=defaultConfig,\r\n) : [T[], FunctionAction<T>] => {\r\n    if (typeof props==='function')\r\n        props = [...Array(length)].map( (_,i:number) => (props as any)(i) )\r\n    const [grids,set] = (grid as Grid<T[]>)( cF2L(props) , refs, cofig)\r\n    const setGrid = (state:FunctionProps<T>) => {\r\n        if (typeof state==='function')\r\n            state = [...Array(length)].map( (_,i:number) => (state as any)(i) )\r\n        set( cF2L(state) )\r\n    }\r\n    return [grids, setGrid]\r\n}\r\n\r\nexport const useGrids        = createGrids(useGrid);\r\nexport const useLayoutGrids  = createGrids(useLayoutGrid);\r\n\r\n/***   (i) => {md:i,lg:i} or (i) => [[md,i],[lg,i]]\r\n  * => [{md:0,lg:0},{md:1,lg:1}] or [[[md,0],[lg,0]],[[md,1],[lg,1]]]\r\n  * => [[ [md,0], [lg,0] ],[ [md,1], [lg,1] ]]\r\n  * => [[md,[0,1]],[lg,[0,1]]]\r\n ***/\r\n\r\n/*\r\nObject.assign(...Object.keys(state[0]).map( k => {k:states.map(s=>s[k])} ))\r\n[ {x:0,y:0}\r\n  {x:1,y:1}\r\n  {x:2,y:2} ]\r\n=>\r\n{x:[0,1,2],y:[0,1,2]}\r\n*/\r\n","import {useLayoutEffect, useEffect, useState, useRef} from 'react'\r\nimport {Effect, ViewConfig,ViewChangeHandler} from '../types'\r\nimport {shallowEqual,defaultConfig} from '../utils'\r\n\r\nconst createView = (effect:Effect) => (\r\n    target: React.RefObject<Element> | Element | null,\r\n    callback?: ViewChangeHandler,\r\n    { defaultView,once,timeout,...initialConfig }:ViewConfig=defaultConfig.viewConfig,\r\n) => {\r\n    const [view,set] = useState<boolean>(defaultView===true)\r\n    const configRef = useRef(initialConfig)\r\n    effect(() => {\r\n        if (!shallowEqual(configRef.current, initialConfig))\r\n            configRef.current = initialConfig\r\n    }, [initialConfig] )\r\n    effect(() => {\r\n        let mounted = true;\r\n        const element = target instanceof Element?target:target&&target.current\r\n        if ( !element ) return ()=>{mounted = false;}\r\n        const observer = new IntersectionObserver( (entries) => {\r\n            const entry = entries[entries.length-1]\r\n            callback && callback(entry);\r\n            mounted  && setTimeout(()=>set(entry.isIntersecting), timeout)\r\n            mounted  && entry.isIntersecting && once && observer.unobserve(element);\r\n        } , { ...configRef.current, root:configRef.current?.root?.current || null })\r\n        observer.observe(element)\r\n        return ()=>{\r\n            mounted = false;\r\n            once && observer.unobserve(element)\r\n        }\r\n    }, [configRef.current, target])\r\n    return view\r\n}\r\n\r\nexport const useView       = createView(useEffect)\r\nexport const useLayoutView = createView(useLayoutEffect)\r\n","import React, {FC, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useGrid} from '../src';\nimport {unregister} from './utils/serviceWorker';\nimport {Card,Sides,Split,Trans,Trees,usePage} from '@tsei/core';\n// import {Title} from './parts'\nimport {About} from './About'\nimport {Grids} from './Grids'\nimport {View}  from './View'\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nconst Pages = {About, Grids, View}\nconst App :FC = () => {\n    const [lang, setLang] = useState<string>(window?.navigator?.language||'ja')\n    const [dark, setDark] = useGrid<number>({md:1, lg:0})\n    const [size, setSize] = useGrid<number>({md:1, lg:1.5 })\n    const [page, setPage] = usePage<{Page:any}>({Page: ({id}:any) => (Pages as any)[id||\"About\"] || \"None\"})\n    return (\n        <div style={{minHeight:\"100vh\",background:dark?\"#000\":\"#f1f1f1\"}}>\n            <Split styleItem={{margin:size*50}}>\n                <Card min={1} style={{width:\"100%\",height:\"100%\"}}>\n                    <Trees styleItem={{color:\"black\"}}>\n                        <>\n                            <a onClick={()=>setPage({id:\"\",i:0})}>About</a>\n                            <a onClick={()=>setPage({id:\"\",i:1})}>TOP</a>\n                        </>\n                        <>\n                            <a onClick={()=>setPage({id:\"API\",i:0})}>API</a>\n                        </>\n                        <>\n                            <a onClick={()=>setPage({id:\"Exmple\",i:0})}>Exmple</a>\n                        </>\n                    </Trees>\n                </Card>\n                <page.Page />\n            </Split>\n            <Sides {...{size}}>\n                <p onClick={()=>window.location.href=\"/note\"}>Note</p>\n                <p onClick={()=>window.location.href=\"/hook\"}>Hook</p>\n                <p onClick={()=>window.location.href=\"/sign\"}>Sign</p>\n            </Sides>\n            <Trans {...{size}}>\n                <div onClick={()=>setLang(p=>p!=='Ja'?'Ja':'En')}>{lang.toUpperCase()}</div>\n                <div onClick={()=>setDark((p:any)=>({md:p.lg,lg:p.md}))}>{dark?'🌛':'🌞'}</div>\n                <div onClick={()=>setSize((p:any)=>({md:p.lg,lg:p.md}))}>{size<75?'👶':'👨'}</div>\n            </Trans>\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\nunregister()\n","import React, {FC, useRef} from 'react'\r\nimport {useMedia, useGrid, } from '../src'\r\n// import {Props, Card, Split} from '@tsei/core'\r\n// import {Mdmd} from '@tsei/mdmd'\r\n// import md from './About.md'\r\n\r\nconst EG1 = () => {\r\n    const ref = useRef(null)\r\n    const isMedium = useMedia({ minWidth:720, maxWidth:960 });\r\n    const [fontSize] = useGrid({xs:37.5, md:50, lg:75}, [ref])\r\n    return (<></>\r\n            // <Card min={1} style={{fontSize, textAlign:\"center\"}}>\r\n            //     <Split>\r\n            //         <div style={{background:\"rgba(255,0,0,.5)\"}}/>\r\n            //         <div ref={ref}>{isMedium? \"😋\":\"😎\" }</div>\r\n            //         <div style={{background:\"rgba(0,0,255,.5)\"}}/>\r\n            //     </Split>\r\n            // </Card>\r\n    )\r\n}\r\nexport const About = () => <></>\r\n// export const About:FC<Props> = ({size, dark}) => {\r\n//     return (\r\n//         <>\r\n//             <EG1 />\r\n//         </>\r\n//     );\r\n// };\r\n","import React from 'react'\r\nimport {useGrids} from '../src'\r\nexport const Grids = () => {\r\n    const face = ['🙄','🤣','🧐','🤯','🤮'];\r\n    const ref  = React.useRef(null)\r\n    const [ws] = useGrids(face.length, (i)=>(i%2===0)\r\n        ? { md: 1/5, xl:i/face.length/3 }\r\n        : { md:1/10, xl:i/face.length/6 }\r\n    , [ref]);\r\n    return (\r\n        <div ref={ref} style={{display:\"grid\", width:\"95%\"}}>\r\n            {face.map( (emoji, i) =>\r\n                <div key={i} style={{width:ws[i]}}>{emoji}</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {useGrid, useView} from '../src';\r\nexport const View = () => {\r\n    const ref1 = React.useRef(null)\r\n    const ref2 = React.useRef(null)\r\n    const isView = useView(ref1)\r\n    const [fontSize,set] = useGrid({none:150, md:100,lg:200}, [ref1])\r\n    const [background]   = useGrid({\r\n        none:\"#fff\", init:\"#000\",\r\n        onView:(bool) =>\r\n            set(bool\r\n                ? {md:150, lg:250}\r\n                : {md:100, lg:200})\r\n    }, [ref1, ref2])\r\n    return (\r\n        <div style={{fontSize,background,transition:\"1s\"}}>\r\n            <div ref={ref1}>{'😎'}</div>\r\n            {[...Array(5)].map((_,i)=>\r\n                <div key={i}>{isView?'😘':'🤣'}</div>\r\n            )}\r\n            <div ref={ref2}>{'😎'}</div>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}